{"componentChunkName":"component---src-templates-post-template-js","path":"/post/jpa-관계와-사용법-(단방향)","result":{"data":{"markdownRemark":{"html":"<h2>데이터베이스의 관계</h2>\n<p>앞서 관계형 데이터베이스의 데이터를 객체로 표현해 관리하는 것이 orm 의 기본 방향이라고 이야기 드렸습니다. 하지만 객체로 표현하기 어려운 데이터간의 관계를 위해 jpa 에서 기능을 제공하고 있는데 크게 <strong>단방향</strong>과 <strong>양방향으</strong>로 나뉘어 집니다. </p>\n<p><strong>단방향</strong>과 <strong>양방향</strong>을 구분짓는 차이는 데이터를 사용하는 관점에서 누가 주도권을 가지는 것 인가에 대한 차이이며 둘다 동일한 데이터베이스 테이블의 관계를 의미합니다. 이 글에서는 <strong>단방향</strong>에 대해서 먼저 다루겠습니다.</p>\n<p>데이터베이스에서 사용하는 관계는 <strong>OneToOne</strong>(1:1), <strong>OneToMany</strong>(1:n), <strong>ManyToOne</strong>(n:1), <strong>ManyToMany</strong>(n:m) 가 있습니다. 이중 <strong>ManyToMany</strong>(n:m) 는 데이터베이스에서 물리적으로 지원 하진 않지만 jpa 상에서 논리적으로 지원합니다.</p>\n<p>데이터베이스에서 관계를 맺기 위해선 부모 테이블의 <strong>PK</strong> (Primary Key) 와 자식 테이블의 <strong>FK</strong> (Foreign key) 를 연결하여 서로가 서로에게 의미가 있는 관계 임을 지정하게 됩니다. 이를테면 부모 parent 테이블에서 <strong>PK</strong> 가 id 이면 자식 child 테이블에서는 <strong>FK</strong> parent_id 를 통해 서로 연결을 하게 되는 것 입니다. </p>\n<p><strong>FK</strong> 를 정의 할때 컬럼의 이름은 '<strong>부모 테이블명' + '_' + '부모 테이블 PK'</strong> 로 구성 하는게 일반적 입니다. </p>\n<p>이제 관계를 지원하는 기능에 대해서 하나씩 알아봅시다.</p>\n<hr>\n<h2>@OneToOne</h2>\n<p><strong>@OneToOne</strong> 관계는 데이터베이스 상의 1:1 관계를 의미합니다. 부모 테이블과 자식 테이블의 레코드가 각각 하나씩 연결되어 의미를 가진다는 이야기입니다. </p>\n<p>하지만 1:1 관계를 지정하기에 앞서 이것이 꼭 물리적으로 테이블이 분리되어야 하는지에 대해 생각해 봐야 합니다. 1:1 관계로 구성 한다는 것은 결국 하나의 목적에 부합되는 공통된 데이터를 관리한다고 볼 수 있으며 이것은 하나의 테이블에서 관리 할 수 있는 데이터일 가능성이 높다는 의미입니다.</p>\n<p>JPA 에서 관계를 정의 할때 부모 Entity 객체에 정의된 <strong>PK</strong> 와 자식 Entity 객체에 정의된 <strong>FK</strong> 를 기준으로 정의할 수 있는데 <strong>@OneToOne</strong> 어노테이션이 위치하는 곳은 기본적으로 <strong>FK</strong> 가 있는 쪽 즉 자식 Entity 객체 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span> <span class=\"token comment\">//여기는 parent 의 id</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Entity</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"child\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span> <span class=\"token comment\">//여기는 child 의 id </span>\n    \n    <span class=\"token annotation punctuation\">@OneToOne</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent_id\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//child 에 지정되어 있는 FK parent_id 기준으로 parent 조회 </span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Parent</span> parent<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>OneToOne 관계를 맺었을 때 디폴트 설정으로 <strong>FetchType</strong> 이 <strong>EAGER</strong> 로 설정되어 있어 부모 Entity 를 조회 했을때 자동으로 자식 Entity 를 조회해 옵니다. 만약 자식 Entity 를 바로 사용할 필요가 없다면 속도를 위해 <strong>FetchType</strong> 을 <strong>LAZY</strong> 로 설정할 수 있습니다. <strong>FetchType</strong> 을 <strong>LAZY</strong> 로 지정하면 지정된 Entity 객체를 미리 가지고 있는 것이 아니라 Entity 객체를 사용하려고 할때  데이터를 데이터베이스에서 가지고 옵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span> <span class=\"token comment\">//여기는 parent 의 id</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Entity</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"child\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span> <span class=\"token comment\">//여기는 child 의 id </span>\n    \n    <span class=\"token annotation punctuation\">@OneToOne</span><span class=\"token punctuation\">(</span>fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">)</span> <span class=\"token comment\">//사용시점에 조회가 됨</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent_id\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//child 에 지정되어 있는 FK parent_id 기준으로 parent 조회 </span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Parent</span> parent<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2>@SecondaryTable</h2>\n<p>1:1 관계 중 자식 Entity 객체의 모든 값을 사용할 필요 없이 필요한 자식 Entity 의 값을 부모 Entity 에서 사용하게 하는 방법을 <strong>@SecondaryTable</strong> 이 제공합니다. </p>\n<p><strong>@SecondaryTable</strong> 이 정의된 Entity 를 조회할 때 내부적으로 parent 와 child 의 데이터를 join 해서 한번에 가지고 오기 때문에 속도에서도 조금은 유리하다고 볼 수 있습니다. 하지만 이렇게 Entity 의 값을 혼용해서 사용한다면 Entity Domain 의 정의가 모호 해지고 의미가 퇴색될 수 있기 때문에 꼭 사용이 필요한지 확인을 해야 합니다.</p>\n<p><strong>@SecondaryTable</strong> 의 <strong>name</strong> 속성은 자식 테이블의 이름의 의미하며 <strong>pkJoinColumns</strong> 속성은 부모 테이블과 자식 테이블 간의 join 설정을 합니다. 이때 <strong>@PrimaryKeyJoinColumn</strong> 어노테이션을 이용해 <strong>name</strong> 속성에 자식 테이블의 <strong>FK</strong> 이름을 <strong>referencedColumnName</strong> 속성에 부모 테이블의 <strong>PK</strong> 이름을 명시합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SecondaryTable</span><span class=\"token punctuation\">(</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">\"child\"</span><span class=\"token punctuation\">,</span>\n    pkJoinColumns <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@PrimaryKeyJoinColumn</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"parent_id\"</span><span class=\"token punctuation\">,</span> referencedColumnName<span class=\"token operator\">=</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span> <span class=\"token comment\">//여기는 parent 의 id</span>\n    \n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> table <span class=\"token operator\">=</span> <span class=\"token string\">\"child\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> childName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>필요하다면 <strong>@SecondaryTable</strong> 을 1:1 로서 하나의 자식 Entity 와 관계를 맺을 수 있는 것이 아니라 다중 Entity 와도 관계를 맺을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SecondaryTables</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@SecondaryTable</span><span class=\"token punctuation\">(</span>\n        name <span class=\"token operator\">=</span> <span class=\"token string\">\"child\"</span><span class=\"token punctuation\">,</span>\n        pkJoinColumns <span class=\"token operator\">=</span> \n        \t<span class=\"token annotation punctuation\">@PrimaryKeyJoinColumn</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"parent_id\"</span><span class=\"token punctuation\">,</span> referencedColumnName<span class=\"token operator\">=</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token annotation punctuation\">@SecondaryTable</span><span class=\"token punctuation\">(</span>\n        name <span class=\"token operator\">=</span> <span class=\"token string\">\"detail\"</span><span class=\"token punctuation\">,</span>\n        pkJoinColumns <span class=\"token operator\">=</span> \n        \t<span class=\"token annotation punctuation\">@PrimaryKeyJoinColumn</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"parent_id\"</span><span class=\"token punctuation\">,</span> referencedColumnName<span class=\"token operator\">=</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span> <span class=\"token comment\">//여기는 parent 의 id</span>\n    \n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> table <span class=\"token operator\">=</span> <span class=\"token string\">\"child\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> childName<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> table <span class=\"token operator\">=</span> <span class=\"token string\">\"detail\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> detailName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2>@ManyToOne</h2>\n<p><strong>@ManyToOne</strong> 관계는 자식 Entity 객체에서 부모 Entity 객체를 바라볼 때 사용하는 어노테이션 입니다. <strong>@OneToOne</strong> 과 다른 점은 동일한 부모 Entity 을 가지는 자식 Entity 가 여러개가 있을 수 있다는 점 입니다. <strong>@ManyToOne</strong> 어노테이션이 위치하는 곳은 <strong>FK</strong> 가 있는 자식 Entity 객체 입니다.</p>\n<p><strong>@ManyToOne</strong> 의 <strong>FetchType</strong> 의 디폴트 값은 <strong>EAGER</strong> 로서 자식 Entity 가 조회됨과 동시에 부모 Entity 를 조회해 옵니다. 먄약 부모 Entity 를 바로 사용하지 않는다면 속도를 위해 <strong>FetchType</strong> 을 <strong>LAZY</strong> 로 설정할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Entity</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"child\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@ManyToOne</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Parent</span> parent<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2>@OneToMany</h2>\n<p>Entity 간의 관계를 지정할 때 아마 가장 많이 사용하는 관계가 <strong>@OneToMany</strong> 일 것 입니다. <strong>@OneToMany</strong> 는 데이터를 바라보는 주체가 부모 Entity 이며 하나의 부모 Entity 와 연관이 있는 여러개의 자식 Entity 를 사용 하겠다는 의미입니다. </p>\n<p>부모 Entity 에서 <strong>@OneToMany</strong> 어노테이션을 지정하게 되며 JPA 관계 중 유일하게 <strong>FK</strong> 가 위치한 자식 Entity 가 아닌 부모 Entity 에 어노테이션이 위치 하게 된다는 점을 주의해야 합니다. </p>\n<p>@OneToMany 는 속도를 위해 기본적으로 <strong>FetchType</strong> 설정이 <strong>LAZY</strong> 로 설정되어 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@OneToMany</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent_id\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//child 테이블에 있는 parent_id FK </span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Child</span><span class=\"token punctuation\">></span></span> childList<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Entity</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"child\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>자식 Entity 에서는 물리적으로 항상 참조 키(FK)가 null 이 허용되어야 한다는 것을 주의해야 합니다. 이는 jpa 특징 때문인데 부모의 값을 변경하려고 할때 항상 자식의 참조 키(FK)를 모두 지운 다음 다시 갱신하는 구조이기 때문 입니다. 이를 피하기 위해서는 단방향이 아니라 양방향으로 관계를 구성해야 합니다. 양방향으로 구성시 변경되는 데이터만 update 가 됩니다.</p>\n<hr>\n<h2><strong>@ElementCollection</strong></h2>\n<p><strong>@ElementCollection</strong> 어노테이션은 <strong>OneToMany</strong> 관계에서 자식 Entity 에 있는 모든 값을 가지고 오는 것이 아니라 필요한 속성의 값만 가지고 와서 Collection 으로 구성할 수 있는 기능을 제공합니다. <strong>@Embeddable</strong> 로 지정된 Value 클래스 객체를 이용해 값을 가지고 올 수 도 있습니다.</p>\n<p>먼저 <strong>@ElementCollection</strong> 을 사용하기 위해 <strong>@CollectionTable</strong> 어노테이션의 <strong>name</strong> 속성에 자식 테이블의 이름을 명시합니다. </p>\n<p>그 다음 <strong>joinColumns</strong> 속성에 <strong>@JoinColumn</strong> 으로 정의한 자식 테이블의 FK 를 지정합니다. 이때 <strong>@Column</strong> 어노테이션의 <strong>name</strong> 속성에 지정되는 이름은 자식 테이블의 컬럼명이 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@ElementCollection</span>\n    <span class=\"token annotation punctuation\">@CollectionTable</span><span class=\"token punctuation\">(</span>\n        name <span class=\"token operator\">=</span> <span class=\"token string\">\"child\"</span><span class=\"token punctuation\">,</span>\n        joinColumns <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@OrderColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> childNameList<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>@ElementCollection</strong> 을 통해 정의된 값을 가지는 List 형태의 Collection 이 아니라 Map 형태의 Collection 을 가지고 올 수도 있습니다. </p>\n<p>이를 위해 <strong>@MapKeyColumn</strong> 어노테이션을 이용해 Map 의 <strong>Key</strong> 에 해당되는 컬럼을 <strong>@Column</strong> 을 이용해 Map 의 <strong>Value</strong> 에 해당되는 컬럼을 지정 하며 Map Collection 에 값을 가지고 오게 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@ElementCollection</span>\n    <span class=\"token annotation punctuation\">@CollectionTable</span><span class=\"token punctuation\">(</span>\n        name <span class=\"token operator\">=</span> <span class=\"token string\">\"child\"</span><span class=\"token punctuation\">,</span>\n        joinColumns <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@MapKeyColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> childNameMap<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2>@ManyToMany</h2>\n<p>가장 마지막으로 볼 관계는 <strong>@ManyToMany</strong> 다대다 관계입니다. 이는 앞서 이야기 드린 것과 같이 데이터베이스상에 물리적으로 표현할 수 없는 관계이며 JPA 상에서 논리적으로만 표현 됩니다. JPA 는 이 것을 지원하기 위해서 데이터베이스 중간에 <strong>@ManyToMany</strong> 관계를 표현할 수 있는 맵핑 테이블을 생성을 하게 되며 이 <strong>중간 맵핑 테이블은</strong> JPA 상에서 노출이 되지 않고 숨겨 있게 됩니다.</p>\n<p><strong>@ManyToMany</strong> 를 데이터베이스에서 사용하지 않는 이유는 데이터간의 관계가 복잡 해지기 때문입니다. 그렇기 때문에 <strong>@ManyToMany</strong> 를 사용하기에 앞서 이것이 꼭 필요한 관계 설정 인지를 확인해야 합니다. </p>\n<p>대부분의 경우 <strong>@ManyToMany</strong> 가 아닌 다른 형태로 Entity 를 설계 한다던지 다른 형태로 값을 가지고 온다던지 여러 형태로 대신 할 수 있기 때문입니다.</p>\n<p><strong>@ManyToMany</strong> 를 사용하기 위해서 <strong>@JoinTable</strong> 어노테이션의 <strong>name</strong> 속성으로 <strong>중간 맵핑 테이블</strong>을 정의합니다. 이 <strong>중간 맵핑 테이블</strong>로 부모 Entity 와 자식 Entity 간의 관계를 알 수 있고 다른 관계와는 다르게 부모와 자식 Entity 가 동등한 위치이기 때문에 자식 Entity 의 <strong>FK</strong> 는 존재하지 않습니다. </p>\n<p>때문에 <strong>중간 맵핑 테이블</strong>에 부모 Entity 의 <strong>PK</strong> 와 자식 Entity 의 <strong>PK</strong> 가 둘다 존재하게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@ManyToMany</span>\n    <span class=\"token annotation punctuation\">@JoinTable</span><span class=\"token punctuation\">(</span>\n        name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent_child\"</span><span class=\"token punctuation\">,</span>\n        joinColumns <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent_id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        inverseJoinColumns <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"child_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Child</span><span class=\"token punctuation\">></span></span> childList<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음 글에서는 Entity 의 양방향 관계에 대해서 알아 보겠습니다.</p>","frontmatter":{"title":"JPA 관계와 사용법 (단방향)","date":"2020/04/18","template":"post","slug":"jpa-관계와-사용법-(단방향)","series":"쉽게 이해하고 사용하는 JPA","seriesNo":3,"seriesTotalNo":6,"description":null,"tags":["jpa","spring"]}}},"pageContext":{"slug":"jpa-관계와-사용법-(단방향)"}}}