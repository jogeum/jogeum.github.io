{"componentChunkName":"component---src-templates-post-template-js","path":"/post/java-functional-interface","result":{"data":{"markdownRemark":{"html":"<h2>자바 8 함수형 프로그래밍</h2>\n<p>자바가 8로 접어 들면서 가장 크게 변화된 것은 함수형 개발 페러다임을 지원하기 시작 했다는 점 입니다. 하지만 기본적으로 자바라는 언어는 객체지향 언어 입니다. 그렇기 때문에 함수형으로 개발 하기 위해서는 어떤 점이 변경 되었고 또한 어떻게 적용할 수 있는지를 알아야 합니다. </p>\n<p>생각해 보면 굳이 객체지향으로 설계된 자바라는 언어에 함수형 개발 방식을 접목 시켜야 될 이유가 뭐가 있을까요?  자바는 함수형 개발 방식을 사용할 수 있게 됨으로서 조금 더 재사용이 가능한 코드 조각을 만들 수 있게 되었고 이 때문에 조금 더 유연한 개발을 할 수 있는 가능성이 늘어 났습니다.</p>\n<hr>\n<h2>함수형 VS 객체지향</h2>\n<p>함수형 개발 방식과 객체지향 개발 방식을 비교할때 큰 차이는 값을 취급하는 단위가 어디까지 인지에 따라 나눌 수 있습니다.  예를 들어 자바는 예전 부터 값(상태) 과 행위를 다루기 위한 기본 단위를 객체로 정의 했었고 이 객체를 클래스라는 형태로 구현할 수 있었습니다. 어떻게 보면 자바 프로그램의 모든 단위가 <u>객체(클래스)</u> 로 이루어져 있다고 봐도 무방할 듯 합니다. </p>\n<p>이에 반해 함수형 개발 방식은 행위에 해당하는 부분도 값으로 취급이 가능해 졌다는 것인데 자바에서 의미하는 기본형의 데이타 (Integer 나 String) 만 값이 아니라 행위(로직) 도 값으로 취급할 수 있게 되었다는 이야기 입니다. 이것은 자바가 코드의 재활용 단위가 클래스 였던 것이 함수 단위로 재사용이 가능해 지면서 조금더 개발을 유연하게 할 수 있게 된 점 이라고 할 수 있습니다.</p>\n<hr>\n<h2>함수형 인터페이스 종류</h2>\n<p>자바에서 제공하는 함수형 인터페이스 종류는 다음과 같습니다. </p>\n<table>\n<thead>\n<tr>\n<th>종류</th>\n<th>인자</th>\n<th>반환</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Runnable</td>\n<td></td>\n<td></td>\n<td>기본적인 형태의 인터페이스, 인자와 반환값 모두 없음</td>\n</tr>\n<tr>\n<td>Supplier<T></td>\n<td></td>\n<td><T></td>\n<td>인자가 없이 제너릭 타입의 반환값만 있는 인터페이스, 항상 같은 값을 반환</td>\n</tr>\n<tr>\n<td>Consumer<T></td>\n<td><T></td>\n<td></td>\n<td>제너릭 타입의 인자만 있고 반환값이 없는 인터페이스</td>\n</tr>\n<tr>\n<td>Predicate<T></td>\n<td><T></td>\n<td>Boolean</td>\n<td>제너릭 타입의 인자와 Boolean 타입의 반환값을 가지는 인터페이스</td>\n</tr>\n<tr>\n<td>Function&#x3C;T, R></td>\n<td><T></td>\n<td><R></td>\n<td>제너릭 타입의 인자와 제너릭 타입의 반환값이 같이 있는 인터페이스</td>\n</tr>\n<tr>\n<td>UnaryOperator<T></td>\n<td><T></td>\n<td><T></td>\n<td>같은 제너릭 타입의 인자와 반환값을 가지고 있는 인터페이스</td>\n</tr>\n<tr>\n<td>BinaryOperator<T></td>\n<td>&#x3C;T, T></td>\n<td><T></td>\n<td>같은 제너릭 타입의 인자 2개를 받고 같은 제너릭 타입의 반환값을 가지는 인터페이스</td>\n</tr>\n<tr>\n<td>BiConsumer&#x3C;T, U></td>\n<td>&#x3C;T, U></td>\n<td></td>\n<td>다른 제너릭 타입의 인자 2개를 받고 반환값이 없는 인터페이스</td>\n</tr>\n<tr>\n<td>BiPredicate&#x3C;T, U></td>\n<td>&#x3C;T, U></td>\n<td>Boolean</td>\n<td>다른 제너릭 타입의 인자 2개를 받고 Boolean 타입의 반환값을 가지는 인터페이스</td>\n</tr>\n<tr>\n<td>BiFunction&#x3C;T, U, R></td>\n<td>&#x3C;T, U></td>\n<td><R></td>\n<td>다른 제너릭 타입의 인자 2개를 받고 다른 제너릭 타입의 반환값을 가지는 인터페이스</td>\n</tr>\n<tr>\n<td>Comparator<T></td>\n<td>&#x3C;T, T></td>\n<td>int</td>\n<td>같은 제너릭 타입의 인자 2개를 받고 Integer 반환값을 가지는 인터페이스, 객체간의 값을 비교하기 위한 compare 기능을 위한 인터페이스</td>\n</tr>\n</tbody>\n</table>\n<p>함수형 인터페이스는 어떤 인자를 받아서 어떤 값을 반환 할 것이라는 것을 제너릭 타입 <T> 을 통해 미리 주고 받을 객체형을 명시할 수 있는데 보면 제공하고 있는 함수형 인터페이스가 받을 수 있는 인자 값이 최대 2개를 넘지 않는 다는 것을 발견 할 수 있습니다.</p>\n<p>이것은 함수를 어떻게 설계하는 것이 좋은지에 대한 가이드라고 볼 수 있는데 함수는 한가지의 일만 해야 되며 인자가 2개를 넘어가는 순간 하나 이상의 일을 하고 있을 가능성이 높으므로 다른 부수효과를 일으키지 않도록 어느정도 설계를 강제하는 것이라고 볼 수도 있습니다.</p>\n<p>하지만 로직에 어쩔 수 없이 (그런 경우는 거의 없지만) 하나의 함수에서 처리하는게 더 효율적이라면 별도의 DTO 를 정의하고 여기에 값을 담아 인자로 전달하는 방법을 사용해야 합니다.</p>\n<hr>\n<h2>간단하게 사용해 보기</h2>\n<p>자 이제 실제 함수형 인터페이스를 이용해 간단한 연산을 담고 있는 함수 인터페이스를 정의해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber 0\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token class-name\">BinaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> add <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">sum</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//더하기</span>\n<span class=\"token class-name\">BinaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> subtract <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> v1 <span class=\"token operator\">-</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\">//빼기</span>\n<span class=\"token class-name\">BinaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> multiply <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> v1 <span class=\"token operator\">*</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\">//곱하기</span>\n<span class=\"token class-name\">BinaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> divide <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> v1 <span class=\"token operator\">/</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\">//나누기</span>\n<span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> amountFormat <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DecimalFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#,##0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//금액 형태로 포멧</span>\n<span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> isPositiveNumber <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> v1 <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//양수인지 여부</span>\n<span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> isNegativeNumber <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> v1 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//음수인지 여부</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>이제 실제 정의한 인터페이스를 실행해 봅시다. 함수 인터페이스에 따라서 실행되는 함수 명칭이 조금씩 다르지만 거의 유사한 형태이니 주의하며 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber 0\" class=\"language-java line-numbers\"><code class=\"language-java\">log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add : \"</span> <span class=\"token operator\">+</span> add<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlog<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"subtract : \"</span> <span class=\"token operator\">+</span> subtract<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlog<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"multiply : \"</span> <span class=\"token operator\">+</span> multiply<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlog<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"divide : \"</span> <span class=\"token operator\">+</span> divide<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlog<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"amountFormat : \"</span> <span class=\"token operator\">+</span> amountFormat<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlog<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"isPositiveNumber : \"</span> <span class=\"token operator\">+</span> isPositiveNumber<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlog<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"isPositiveNumber : \"</span> <span class=\"token operator\">+</span> isNegativeNumber<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>정의된 함수 인터페이스를 실행 했을때 실행 결과는 다음과 같이 나옵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber 0\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token operator\">-</span> add <span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n<span class=\"token operator\">-</span> subtract <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token operator\">-</span> multiply <span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n<span class=\"token operator\">-</span> divide <span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token operator\">-</span> amountFormat <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">000</span><span class=\"token punctuation\">,</span><span class=\"token number\">000</span>\n<span class=\"token operator\">-</span> isPositiveNumber <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token operator\">-</span> isPositiveNumber <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<hr>\n<h2>코드를 함수형으로 조각내기</h2>\n<p>이것만 보면 함수형 인터페이스를 어떻게 사용해야 될지 감이 잘 오지 않을 수도 있을 것 같습니다. 하지만 함수형 개발 방식은 로직을 변수처럼 취급 할 수 있다는 점이 차이점 이라고 이야기 드렸습니다. 이것은 로직을 변수에 미리 만들어 두고 실행을 지연시켜 필요할때 사용이 가능함을 의미합니다. </p>\n<p>테스트를 앞서 간단한 연산을 담고 있는 함수 인터페이스를 <strong>CalculatorUtils</strong> 클래스안에 담아 둡니다. 함수 인터페이스는 기존 함수와는 다르게 행위를 정의하는 것이 아니라 변수에 행위를 담는 것이기 때문에 이처럼 외부에서 사용을 해야 된다면 지역 변수가 아니라 전역 변수로 선언을 해줘야 메모리가 반환이 되지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber 0\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CalculatorUtils</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">BinaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> add <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">sum</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">BinaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> subtract <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> v1 <span class=\"token operator\">-</span> v2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">BinaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> multiply <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> v1 <span class=\"token operator\">*</span> v2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">BinaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> divide <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> v1 <span class=\"token operator\">/</span> v2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> amountFormat <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DecimalFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#,##0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> isPositiveNumber <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> v1 <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> isNegativeNumber <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> v1 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>별로 실용적이지는 않지만 인자의 값이 양수일때 값에 1을 더하고 인자의 값이 음수일때 값에 1을 빼는 로직을 함수형 인터페이스를 이용해 만들어 보겠습니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber 0\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">BinaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> addNumber <span class=\"token operator\">=</span> <span class=\"token class-name\">CalculatorUtils</span><span class=\"token punctuation\">.</span>isPositiveNumber<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">?</span> <span class=\"token class-name\">CalculatorUtils</span><span class=\"token punctuation\">.</span>add\n            <span class=\"token operator\">:</span> <span class=\"token class-name\">CalculatorUtils</span><span class=\"token punctuation\">.</span>subtract<span class=\"token punctuation\">;</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CalculatorUtils</span><span class=\"token punctuation\">.</span>amountFormat<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>addNumber<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>이때 어떤 연산 함수가 실행 될지는 실제 양수인지 음수인지를 비교하는 비교문이 동작하고 나서 결정이 되고 실행은 그 이후에 이루어 지는 것을 볼 수 있습니다. 이처럼 함수형 인터페이스를 이용하면 실제 로직이 실행 되는 것을 좀더 유연하게 처리할 수 있게 됩니다.</p>\n<hr>\n<h2>함수형 인터페이스를 인자로 전달하기</h2>\n<p>앞서 함수형 인터페이스를 값으로 취급이 가능 하다고 이야기 드렸습니다. 그렇기 때문에 필요하다면 다른 함수의 인자로 함수형 인터페이스를 전달 할 수도 있는데요. 이것을 응용하면 필요한 핵심 로직을 미리 만들어 두고 만들어 둔 로직들을 단순히 조립만 하는 형태로 개발을 할 수도 있게 됩니다. 객체에서 중요한 요소인 <strong>행위</strong>와 <strong>상태</strong>와 <strong>관계</strong> 중 <strong>행위</strong>에 대한 것들을 아예 분리할 수도 있다는 이야기 입니다. (혹시 이렇게 극단적으로 작성할일은 없겠지만 노파심에 이런게 가능 할 수 있다 정도만 알아두면 되겠습니다. )</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber 0\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> number<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BinaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> calcNumbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>calcNumbers<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>calc <span class=\"token operator\">-></span> log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"calc : \"</span> <span class=\"token operator\">+</span> calc<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>실행은 아래와 같이 변경할 값과 실행할 함수 인터페이스를 담아 함께 넘깁니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber 0\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CalculatorUtils</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CalculatorUtils</span><span class=\"token punctuation\">.</span>subtract<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>그리고 만약 필요하다면 함수 인터페이스를 변수에 담지 않고 직접 정의해 전달 할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber 0\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>","frontmatter":{"title":"자바 함수형 인터페이스 (Functional Interface) 활용과 이해","date":"2020/03/01","template":"post","slug":"java-functional-interface","series":null,"seriesNo":null,"seriesTotalNo":null,"description":" 자바가 8로 접어 들면서 가장 크게 변화된 것은 함수형 개발 페러다임을 지원하기 시작 했다는 점 입니다. 하지만 기본적으로 자바라는 언어는 객체지향 언어 입니다. 그렇기 때문에 함수형으로 개발 하기 위해서는 어떤 점이 변경 되었고 또한 어떻게 적용할 수 있는지를 알아야 합니다.","tags":["java","functional-interface"]}}},"pageContext":{"slug":"java-functional-interface"}}}