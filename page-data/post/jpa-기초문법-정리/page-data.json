{"componentChunkName":"component---src-templates-post-template-js","path":"/post/jpa-기초문법-정리","result":{"data":{"markdownRemark":{"html":"<h2>@Entity</h2>\n<p><strong>@Entity</strong> 어노테이션은 데이터베이스의 <strong>테이블</strong>과 1:1로 매칭 되는 객체 단위이며 Entity 객체의 인스턴스 하나가 테이블의 레코드 값을 의미합니다.</p>\n<p>그렇기 때문에 객체의 인스턴스를 구분하기 위한 유일한 키 값을 가지는데 이것은 테이블 상의 <strong>Primary Key</strong> 와 같은 의미를 가지며 <strong>@Id</strong> 어노테이션으로 표기 됩니다.</p>\n<p>먼저 Spring Boot 를 설정 할때 <strong>spring.jpa.hibernate.ddl-auto</strong> 속성이 <strong>create</strong> 혹은 <strong>update</strong> 로 되어 있을 경우 Spring 프로젝트가 시작 될 때 EntityManager 가 자동으로 DDL 을 수행해 테이블을 생성해 줍니다.</p>\n<p>이때 명시적으로 <strong>@Entity</strong> 의 <strong>name</strong> 속성을 이용해 데이터베이스 상의 실제 테이블 명칭을 지정하지 않는다면 <strong>Entity 클래스</strong>의 이름을 기준으로 UnderScore 방식의 이름으로 변경된다는 점을 주의 해야 됩니다. 데이터베이스 상에서는 기본적으로 UnderScore 방식의 명명 법이 기본이 되기 때문입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Organization</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Entity</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"employee\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//이름 속성을 지정하지 않았기 때문에 employee_address 라는 이름의 테이블이 생성 됩니다.</span>\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeAddress</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2>@Column</h2>\n<p><strong>@Column</strong> 어노테이션은 데이터베이스의 테이블에 있는 컬럼과 동일하게 1:1로 매칭 되기 때문에 Entity 클래스에 속성으로 정의 됩니다. 만약 테이블에 a, b, c 컬럼이 있다면 각각 3개의 <strong>@Column</strong> 어노테이션을 작성 하게 됩니다. 이때 의도적으로 프로그램에 필요없는 컬럼 들은 명시하지 않아도 되는데 데이터베이스 테이블에 실제 a, b, c, d 총 4개의 컬럼이 있더라도 a,b,c 컬럼만 Entity 클래스에 작성해도 무방 하다는 이야기 입니다.</p>\n<p>만약 Entity 클래스 속성의 이름과 데이터베이스 테이블의 컬럼 이름이 동일하고 별다른 설정을 하지 않는다면 <strong>@Column</strong> 어노테이션은 생략이 가능합니다.</p>\n<p>만약 Spring Boot 의 <strong>spring.jpa.hibernate.ddl-auto</strong> 속성이 <strong>create</strong> 일때 테이블을 생성 할때 같이 컬럼이 생성이 되고, <strong>update</strong> 일때는 Entity 클래스에 있지만 해당 테이블에 존재하지 않는 컬럼 이라면 추가로 생성해 줍니다. </p>\n<p>하지만 컬럼의 데이터 타입이 변경 되었거나 컬럼의 길이가 변경 되었을 때는 자동으로 데이터베이스에 DDL 을 반영 해주지 않기 때문에 속성을 변경할 때는 주의해야 합니다.</p>\n<p>데이터베이스에서 컬럼에 실제 데이타가 가질 수 있는 길이를 명시해 두는데 이것은 데이터베이스에 데이터를 효율적으로 관리하기 위해서 입니다. <strong>@Column</strong> 에도 이처럼 length 속성으로 길이를 명시 할 수 있습니다. 만약 length 속성이 없다면 기본 길이인 255가 지정 됩니다. 이것은 문자열 형태를 가지는 데이터 속성만 해당 되며 큰 숫자를 표현하는 BigDecimal 데이터 속성 일 경우 precision, scale 로 최대 길이를 지정 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Column</span> \n<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> code<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//@Column 은 생략이 가능합니다.</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">;</span> \n\n<span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>precision <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> scale <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">BigDecimal</span> amount<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Column</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> size<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span><span class=\"token string\">\"register_date\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDateTime</span> registerDate<span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h3>@Id</h3>\n<p>데이터베이스의 테이블은 기본적으로 유일한 값을 가집니다. 그것을 <strong>PK (Primary Key)</strong> 라고 하는데 데이터베이스는 이 유일한 키 값을 기준으로 질의한 데이터를 추출해 결과셋을 반환해 줍니다. 테이블 상에 <strong>PK</strong> 가 없는 테이블도 있지만 대부분의 경우 반드시 <strong>PK</strong> 가 존재합니다.</p>\n<p>JPA에도 Entity 클래스 상에 해당 <strong>PK</strong> 를 명시적으로 표시를 해야 되는데 그것을 <strong>@Id</strong> 어노테이션을 이용해 이것이 <strong>PK</strong> 임을 지정 합니다.</p>\n<p>만약 Spring Boot 의 <strong>spring.jpa.hibernate.ddl-auto</strong> 속성이 <strong>create</strong> 로 되어 있고 아직 해당 테이블이 데이터베이스에 존재하지 않는다면 EntityManager 가 DDL 을 통해 테이블을 생성 하면서 <strong>PK</strong> 를 지정해 줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Id</span>\n<span class=\"token annotation punctuation\">@Column</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> code<span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h3>@GeneratedValue</h3>\n<p><strong>PK</strong> 컬럼의 데이터 형식은 정해져 있지는 않으나 구분이 가능한 유일한 값을 가지고 있어야 하고 데이터 경합으로 인해 발생되는 데드락 같은 현상을 방지 하기 위해 대부분 BigInterger 즉 <strong>Java 의 Long</strong> 을 주로 사용합니다.</p>\n<p>물론 String 형태의 고정된 키 값을 직접 생성해서 관리하기도 합니다. 하지만 이 방법을 사용 할때 중요한 것은 대량의 요청이 유입 되더라도 중복과 <strong>deadlock</strong> 데드락이 발생 되지 않을 만큼 키값이 빨리 생성이 되고 안전하게 관리 되어야 한다는 점입니다.</p>\n<blockquote>\n<p>deadlock동일한 시점에 요청이 유입 되었을때 데이타베이스는 테이블 혹은 레코드를 lock 을 걸어 데이타가 변경되지 않도록 막아 놓고 다른 작업을 진행합니다.이때 1번째 요청이 A 테이블의 값을 변경하고 lock 을 걸어둔 상태에서 B 테이블을 사용하려고 하고, 2번째 요청이 B 테이블의 값을 변경하고 lock 을 걸어둔 상태에서 A 테이블을 사용하려고 할때 데이타베이스는 우선순위를 판단 할 수 없어 그대로 교착상태에 빠져 버립니다.이때는 어쩔 수 없이 강제로 시스템을 재시작하여 데이타베이스 커낵션을 초기화 시켜줘야 합니다.</p>\n</blockquote>\n<p>가장 보편적으로 사용이 되는 데이터베이스인 MySQL, ORACLE 에는 Long 타입의 키 값을 생성하는 방식이 서로 조금 다른데요. MySQL 은 auto increment 방식을 ORACLE 은 sequence 방식을 사용합니다.</p>\n<h3><strong>- auto increment</strong></h3>\n<p>먼저 MySQL 의 auto increment 방식을 알아 보겠습니다. auto increment 방식은 숫자형 으로  되어 있는 ID 컬럼을 auto increment 로 지정하면 자동으로 새로운 레코드가 생성이 될 때마다 마지막 ID 값에서 자동으로 +1 을 해주는 방식입니다. </p>\n<p>이를 위해 <strong>@GeneratedValue</strong> 어노테이션의 strategy 속성을 <strong>GenerationType.IDENTITY</strong> 로 지정해 auto increment 컬럼인 것을 EntityManager 에 알려 줍니다.</p>\n<p>ID 컬럼의 이름은 명시적으로 id 로 지정하는 것이 관례 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@Id\n@GeneratedValue(strategy = GenerationType.IDENTITY)\nprivate Long id;</code></pre></div>\n<h3>- sequence</h3>\n<p>ORACLE 에서 주로 사용 되는 sequence 방식은 sequence ORACLE 객체를 생성해 두고 해당 sequence 를 호출 할 때마다 기존 값의 +1 이 된 값을 반환해 주는 방식입니다. 이를 위해 <strong>@GeneratedValue</strong> 어노테이션의 strategy 속성을 <strong>GenerationType.SEQUENCE</strong> 로 지정해 sequence 를 사용해 <strong>PK</strong> 값을 사용하겠다고 지정합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@Id\n@SequenceGenerator(name=&quot;seq&quot;, sequenceName=&quot;jpa_sequence&quot;)\n@GeneratedValue(strategy=GenerationType.SEQUENCE, generator=&quot;seq&quot;)\nprivate Long id;</code></pre></div>\n<hr>\n<h3>@EmbeddedId</h3>\n<p>앞서 데이터베이스의 테이블은 기본적으로 유일한 값을 가지는데 그것을 <strong>PK</strong> 라고 이야기 한다고 설명 드렸습니다. 일반적인 경우에는 <strong>PK</strong> 를 단일 <strong>@Id</strong> 로 구성하지만 경우에 따라선 <strong>복합키</strong>로서 테이블의 <strong>PK</strong> 를 정의 하기도 합니다. <strong>복합키</strong>는 두개 이상의 <strong>@Id</strong> 로 구성이 되는데 이를 직접 Entity 에 정의하는 것이 아니라 별도의 클래스를 정의해 <strong>복합키</strong>를 사용합니다.</p>\n<p>먼저 PK 를 위한 클래스를 생성한 다음 <strong>@Embeddable</strong> 어노테이션을 이용해 이 클래스가 Entity 에 삽입이 가능함을 명시 합니다.</p>\n<p>그 다음 Entity 에서는 <strong>@EmbeddedId</strong> 어노테이션을 이용해 이 Entity 에 해당 <strong>Value</strong> 를 <strong>PK</strong> 로 사용한다고 지정합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Embeddable</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CompanyOrganizationKey</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">{</span>\n\t  <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"company_code\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> companyCode<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"organization_code\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> organizationCode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CompanyOrganization</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@EmbeddedId</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">CompanyOrganizationKey</span> companyOrganizationKey<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h3>@Enumerated</h3>\n<p><strong>@Enumerated</strong> 어노테이션은 java 의 <strong>enum</strong> 형태로 되어 있는 미리 정의되어 있는 코드 값이나 구분 값을 데이터 타입으로 사용하고자 할때 사용됩니다. 속성으로 EnumType.ORDINAL, EnumType.STRING 이 있는데 ORDINAL 은 enum 객체에 정의된 순서를 값으로 사용 하고 STRING 은 enum 의 문자열 자체가 값으로 사용이 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">FlagYN</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Y</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">N</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Enumerated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EnumType</span><span class=\"token punctuation\">.</span>ORDINAL<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"access_yn\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">FlagYN</span> accessYn<span class=\"token punctuation\">;</span> <span class=\"token comment\">//0, 1 이 값으로 저장</span>\n\n<span class=\"token annotation punctuation\">@Enumerated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EnumType</span><span class=\"token punctuation\">.</span>STRING<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"use_yn\"</span><span class=\"token punctuation\">,</span> length <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">FlagYN</span> useYn<span class=\"token punctuation\">;</span> <span class=\"token comment\">//'Y', 'N' 이 값으로 저장</span></code></pre></div>\n<hr>\n<h3>@Transient</h3>\n<p>Entity 테이블에 정의되어 있는 속성은 @Column 어노테이션이 정의 되어 있지 않더라도 모두 Column 으로 인식하게 됩니다. 만약 Entity 테이블에 속성으로서 지정되어 있지만 데이터베이스 상에 필요없는 속성이라면 <strong>@Transient</strong> 어노테이션을 이용해서 해당 속성을 데이터베이스에서 이용하지 않겠다 라고 명시 합니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transient</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> tempValue<span class=\"token punctuation\">;</span></code></pre></div>\n<p>다음 글에서는 JPA 에서 Entity 간의 관계를 다루는 방법에 대해서 알아 보겠습니다.</p>","frontmatter":{"title":"JPA 기초문법 정리","date":"2020/04/18","template":"post","slug":"jpa-기초문법-정리","series":"쉽게 이해하고 사용하는 JPA","seriesNo":2,"seriesTotalNo":6,"description":null,"tags":["jpa","spring"]}}},"pageContext":{"slug":"jpa-기초문법-정리"}}}