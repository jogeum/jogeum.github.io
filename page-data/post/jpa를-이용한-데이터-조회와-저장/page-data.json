{"componentChunkName":"component---src-templates-post-template-js","path":"/post/jpa를-이용한-데이터-조회와-저장","result":{"data":{"markdownRemark":{"html":"<h2>JPA Repository</h2>\n<p>Entity 에 있는 데이터를 조회하거나 저장/변경 그리고 삭제를 할때 JPA 에서 제공하는 JPA Repository 라는 인터페이스를 정의해 해당 Entity 의 데이터를 사용 할 수 있습니다. </p>\n<p>Spring JPA 에서 Repository 의 인터페이스만 정의하면 내부 구현을 자동으로 생성시켜 주기 때문에 별도의 구현체를 따로 생성하지 않아도 됩니다. Repository 는 내부적으로 JPA 의 EntityManager 가 직접 모든 Entity의 데이터를 관리하고 있기 때문에 원한다면 Repository 인터페이스를 만들지 않고도 EntityManager 를 사용해 Persistance Layer 를 직접 사용 할 수도 있습니다.</p>\n<p>Repository 는 대게 Entity 와 1:1 로 매칭 된다고 볼 수도 있으나 꼭 그런 것은 아닙니다. 부모에 종속 적인 자식 Entity 가 있고 자식에 대한 직접적인 데이터 조작이 필요가 없다면 부모 Entity 에 대해서만 Repository 를 정의 할 수도 있습니다. 필요하다면 부모 Entity 에서 지정된 관계를 통해 자식 Entity 를 사용하면 되기 때문입니다.</p>\n<hr>\n<h2>Post Entity</h2>\n<p>테스트를 위해 여러 관계가 지정되어 있는 Post Entity 를 정의하겠습니다. 앞서 관계를 설명하는 것 보다는 조금 더 긴 내용을 담고 있지만 하나씩 살펴 보도록 하겠습니다.</p>\n<ol>\n<li>데이터의 불변성을 보장해 주기 위해 Entity 내부 변수에 대한 Setter 함수는 정의 하지 않고 lombok lib 에서 자동으로 Getter 함수를 생성해 주는 <strong>@Getter</strong> 어노테이션을 지정해 줍니다.\nGetter 함수만 정의하고 Setter 함수를 사용하지 않는 이유는 어디에서 발생 될지 알 수 없는 값의 오염을 방지 하고자 하는 목적입니다. Entity 내부 변수의 값이 변경 될 때는 오직 특정 행위(동작)을 의미하는 개별 함수를 통해서만 변경이 이루어지도록 합니다.</li>\n<li>EntityManager 가 Entity 를 사용하기 위해선 기본 생성자가 반드시 정의 되어 있어야 합니다. 하지만 프로그램 내에 의도하지 않게 Entity 인스턴스가 생성되지 않기 위해서 lombok lib 에서 제공하는 <strong>@NoArgsConstructor</strong> 어노테이션에 <strong>access = AccessLevel.PROTECTED</strong> 속성을 정의해 줍니다. <strong>@NoArgsConstructor</strong> 에 <strong>AccessLevel.PROTECTED</strong> 속성을 정의하면 protected 접근 지시자를 가지는 기본 생성자가 생성이 되며 필요한 경우에만 Entity 객체의 인스턴스가 생성이 되게 할 수 있습니다.</li>\n<li>Entity 내부 에는 다양한 형태로 값을 조회하는 환경을 테스트하기 위해서 <strong>@OneToOne</strong>, <strong>@OneToMany</strong>, <strong>@ManyToOne</strong>, <strong>@ManyToMany</strong> 등 다양한 형태의 관계를 지정 했습니다.</li>\n<li>마지막으로 Entity 의 모든 내부 변수들을 인자로 받는 생성자를 지정합니다. 이때 id key 변수의 값은 자동으로 생성이 되기 때문에 인자로 전달 받지 않습니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"post\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span><span class=\"token punctuation\">(</span>access <span class=\"token operator\">=</span> <span class=\"token class-name\">AccessLevel</span><span class=\"token punctuation\">.</span>PROTECTED<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Post</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">=</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> content<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ManyToOne</span><span class=\"token punctuation\">(</span>fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"category_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Category</span> category<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@OneToOne</span><span class=\"token punctuation\">(</span>mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"post\"</span><span class=\"token punctuation\">,</span> cascade <span class=\"token operator\">=</span> <span class=\"token class-name\">CascadeType</span><span class=\"token punctuation\">.</span>ALL<span class=\"token punctuation\">,</span> fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Detail</span> detail<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"post\"</span><span class=\"token punctuation\">,</span> cascade <span class=\"token operator\">=</span> <span class=\"token class-name\">CascadeType</span><span class=\"token punctuation\">.</span>ALL<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Reply</span><span class=\"token punctuation\">></span></span> replyList<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ManyToMany</span>\n    <span class=\"token annotation punctuation\">@JoinTable</span><span class=\"token punctuation\">(</span>\n            name <span class=\"token operator\">=</span> <span class=\"token string\">\"post_tag\"</span><span class=\"token punctuation\">,</span>\n            joinColumns <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"post_id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            inverseJoinColumns <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"tag_name\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tag</span><span class=\"token punctuation\">></span></span> tagList<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"created_by\"</span><span class=\"token punctuation\">,</span> updatable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> createdBy<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"created_date\"</span><span class=\"token punctuation\">,</span> updatable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDateTime</span> createdDate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Post</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Category</span> category<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> content<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tag</span><span class=\"token punctuation\">></span></span> tagList<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> createdBy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>category <span class=\"token operator\">=</span> category<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> content<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>detail <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Detail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tagList <span class=\"token operator\">=</span> tagList<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>replyList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>createdBy <span class=\"token operator\">=</span> createdBy<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>createdDate <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addReply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> reply<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>replyList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Reply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Category</span> category<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> content<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tag</span><span class=\"token punctuation\">></span></span> tagList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>category <span class=\"token operator\">=</span> category<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> content<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>detail<span class=\"token punctuation\">.</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span>description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tagList <span class=\"token operator\">=</span> tagList<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>detail <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>detail<span class=\"token punctuation\">.</span><span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>나머지 자식 Entity 인 Detail, Reply 에 대해서는 따로 기술하지 않았습니다. 동작되는 모든 내용을 확인하고 싶으시면 아래 소스코드를 확인해 주세요.</p>\n<hr>\n<h2>PostRepository</h2>\n<p>앞서 정의한 Post Entity 를 위한 Repository 를 생성합니다. 앞서 이야기 한 것과 같이 Post Entity 와 관계를 맺고 있고 하위에 위치하고 있는 Detail, Reply Entity 에 대해선 별도의 Repository 를 생성하지 않았습니다. Detail, Reply Entity 는 Post Entity 와 관계를 벗어나 단독으로 사용될 경우가 없기 때문입니다.</p>\n<p>Repository 의 정의는 간단히 <strong>JpaRepository</strong> 인터페이스를 상속만 하면 끝입니다. 필요하면 복잡한 질의를 하기 위해 Creteria 를 위한 인터페이스, QueryDSL 을 위한 인터페이스를 추가로 상속받아 기능을 확장 시킬 수 있지만 여기에서는 다루지 않습니다.</p>\n<p><strong>JpaRepository</strong> 는 기본적인 CRUD 를 처리할 수 있는 getOne, findById, findAll, save, delete 등의 함수가 정의 되어 있어 간단한 CRUD 동작을 데이터베이스로 부터 처리 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PostRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2>Entity 데이타 조회</h2>\n<p>Entity 에는 데이터를 구분하기 위한 식별자 id (PK) 를 기본으로 가진다고 이야기 드렸습니다. Repository 는 이 식별자를 기준으로 데이터를 조회 하게 됩니다. </p>\n<p>식별자 id에 해당하는 단일 데이터를 조회하는 방법으로 <strong>getOne</strong> 과 <strong>findById</strong> 함수가 제공 되는데 두가지 방법의 차이는 <strong>findById</strong> 의 경우 java <strong>Optional</strong> 인스턴스가 반환이 되고 <strong>getOne</strong> 의 경우 <strong>Entity</strong> 인스턴스 자체가 반환이 된다는 점 입니다. </p>\n<p>또한 <strong>findAll</strong> 함수를 이용해 Entity 의 데이터 전부를 가지고 올 수도 있습니다.</p>\n<blockquote>\n<p>Optional 은 java 8 에서 처음 도입이 되었으며 java 에서 값이 없음을 표현하기 위한 null 값을 그대로 사용하지 않고 Optional 인스턴스로 대체하여 값이 없음에 대한 예기치 못한 에러 발생으로 부터 안전한 값의 처리를 지원한다는 점이 특징 입니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">></span></span> optionalPost <span class=\"token operator\">=</span> postRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>optionalPost<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Post</span> post <span class=\"token operator\">=</span> optionalPost<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">></span></span> postList <span class=\"token operator\">=</span> postRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h3>Entity 데이타 조회 조건</h3>\n<p>JPA 는 미리 정의된 키워드를 조합해 필요한 데이터를 올 수 있도록 추가 조회 함수를 만들 수 있는 방법을 제공 합니다. 이것은 데이터베이스에 Query 를 질의 하는 방식과 비슷한데 실제로 이와 유사한 형태의 Query 가 만들어 집니다.</p>\n<p>키워드 종류를 구분해 보자면 값을 비교하는 <strong>조건 키워드</strong>, 특정 조건들을 <strong>And</strong>, <strong>Or</strong> 로 서로 연결하는 <strong>연결 키워드</strong>, 그리고 정렬할 기준을 정의할 수 있는 <strong>정렬 키워드</strong> 로 구분할 수 있습니다. </p>\n<p>중요한 것은 데이터베이스에 Query 를 직접 작성 하지 않고 키워드를 조합한 조회 함수를 분석해 EntityManager 가 알아서 DBMS 에 맞게 Query 를 생성한다는 점입니다.</p>\n<p>조회 함수를 조합하는 방법은 간단합니다. 단일 건을 조회 할지 여러 건을 조회 할지에 따라 <strong>findBy</strong>, <strong>findAllBy</strong> 로 시작이 되며 Entity 에 미리 정의되어 있는 내부 속성의 이름과 조건 키워드를 연결해 함수를 정의합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PostRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAllByTitleLike</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAllByCategory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Category</span> category<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAllByCreatedDateGreaterThanEqualOrderByIdDesc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span> localDateTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAllByTagListInOrderByCreatedDateAsc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tag</span><span class=\"token punctuation\">></span></span> tagList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>사용할 수 있는 키워드의 종류는 아래와 같습니다.</p>\n<ul>\n<li>\n<p><strong>조건키워드</strong></p>\n<ul>\n<li>Is, Equals, Between, Like, NotLike, StartingWith, EndingWith, Containing, Not, In, NotIn, True, False, IgnoreCase</li>\n<li>LessThan, LessThanEqual, GreaterThan, GreaterThanEqual, After, Before</li>\n<li>IsNull, IsNotNull, NotNull</li>\n</ul>\n</li>\n<li>\n<p><strong>연결키워드</strong></p>\n<ul>\n<li>And, Or</li>\n</ul>\n</li>\n<li>\n<p><strong>정렬키워드</strong></p>\n<ul>\n<li>OrderBy</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2>@Query</h2>\n<p>JPA 에 정의된 키워드를 조합하면 특정 조건에 해당하는 데이터를 가지고 올 수 있습니다. 하지만 DBMS에 종속적인 문법을 사용 해야 하거나 Entity 간의 관계가 정의되지 않은 관계 간의 조인, 데이터 조회 속도 향상을 위한 쿼리 튜닝 등의 목적으로 직접 쿼리를 작성해야 하는 경우도 있습니다. </p>\n<p>이를 위해 JPA 에서는 <strong>@Query</strong> 어노테이션을 제공해 직접 DBMS 에 맞는 query 를 작성할 수 있는 방법을 제공합니다.</p>\n<p><strong>@Query</strong> 속성 중에 <strong>nativeQuery</strong> 속성을 true 로 설정하면 DBMS 에 특화된 쿼리를 작성할 수 있고 false 로 설정하면 쿼리를 JPQL 문법으로 작성하게 됩니다. 기본 값은 false 입니다.</p>\n<p>JPQL 문법은 JPA 에서 사용 되는 언어이며 쿼리 구문과 유사하나 Table 이 아닌 Entity 를 기준으로 데이터를 조회한다는 것이 다릅니다. 특정 DBMS 에 해당하는 쿼리 문법이 더 익숙하다면 <strong>nativeQuery</strong> 속성을 true 로 지정해 직접 쿼리를 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PostRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select p from Post p where p.title like ?1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAllByTitleLike</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"select p.* from post p where p.category_id = ?1\"</span><span class=\"token punctuation\">,</span> nativeQuery <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAllByCategoryId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> categoryId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2>EntityManager</h2>\n<h3>조회</h3>\n<p>JPA 는 내부적으로 데이터를 임시로 담기 위한 공간을 가지는데 이것을 <strong>@Transactional</strong> 단위로 묶어서 EntityManager 관리합니다. 이렇게 EntityManager 가 관리하는 데이터는 commit 혹은 rollback 이 되는 순간까지 임시 영역에서 변경된 상태를 유지 합니다.</p>\n<p>만약 조회 함수로 Post Entity 의 <strong>@Id key</strong> 가 <strong>‘1’</strong> 인 인스턴스를 조회해 왔다고 가정해 봅시다. </p>\n<p>이때 동일한 <strong>@Transactional</strong> 에서 동일한 Post Entity 의 <strong>@Id Key</strong> 가 <strong>‘1’</strong> 인 인스턴스를 조회하면 해당 Entity 인스턴스가 새롭게 조회 하는 것이 아니라 EntityManager 가 관리하고 있는 Entity 인스턴스가 반환이 됩니다.</p>\n<h3>저장/변경</h3>\n<p>이번에는 <strong>JPA Repository</strong> 에서 저장을 위한 함수 <strong>save</strong>, <strong>saveAndFlush</strong> 이용해 변경된 값을 저장 했다고 가정해 보겠습니다. 이때 save 를 통해 저장 했다면 실제 함수가 호출되는 순간 DBMS 에 저장 쿼리가 동작 되는 것을 기대 하겠지만 Transaction 이 Commit 이나 Rollback 으로 완료되기 전까지 변경된 상태가 EntityManager 에서 유지가 됩니다. </p>\n<p>Transaction 이 묶여 있기 때문에 당연하다고 생각할 수도 있지만 JDBC 를 이용해 쿼리를 질의 하는 것과는 다르게 변경을 위해 save 하는 순간 쿼리가 동작하지 않고 commit 되는 순간에 변경을 위해 쌓아 두었던 쿼리를 모두 반영 합니다. </p>\n<p>이것은 JPA 의 특징이며 <strong>JPA</strong> <strong>Repository</strong> 가 save, saveAndFlush 두개의 저장 함수를 제공하고 있는 것은 saveAndFlush 는 Transaction 이 commit 되는 순간 실행되는 영속화를 위한 쿼리를 반영 대상 리스트에 미리 추가해 놓으라는 의미 이지 영속화를 먼저 진행하라는 의미가 아닙니다.</p>\n<p>하지만 이와 같은 동작에 예외가 있는데 Entity 의 id 가 auto increment 인 인스턴스를 신규로 생성 했을때 commit 이 되기도 전에 해당 Entity 의 id 를 알아야 된다면 id 의 값이 아직 결정이 되지 않았기 때문에 이를 확인 하기 위해 저장 쿼리를 먼저 DBMS 에서 던집니다. </p>\n<h3>영속화</h3>\n<p><strong>new Post()</strong> 를 통해 새로운 Post Entity 인스턴스를 생성 했다고 가정 해 보겠습니다. </p>\n<p>명시적으로 <strong>PostRepository.save()</strong> 함수를 통해 저장을 한다는 코드를 작성하지 않더라도 <strong>@Transactional 이</strong>  종료 되는 순간 새롭게 생성된 Entity 는 암묵적으로 데이터베이스에 영속화가 됩니다.</p>\n<p>이것은 값을 변경하는 것도 동일한데 save 함수를 호출하지 않더라도 Entity 인스턴스의 속성 값이 변경이 되면 자동으로 변경을 위한 영속화가 진행 됩니다.</p>\n<hr>\n<h2>소스코드</h2>\n<p>앞서 설명한 JPA 환경 구성과 사용 예제에 대한 소스 코드는 아래 주소에서 확인 하실 수 있습니다.</p>\n<p><a href=\"https://github.com/jogeum/hellojpa\">https://github.com/jogeum/hellojpa</a></p>","frontmatter":{"title":"JPA를 이용한 데이터 조회와 저장","date":"2020/04/18","template":"post","slug":"jpa를-이용한-데이터-조회와-저장","series":"쉽게 이해하고 사용하는 JPA","seriesNo":5,"seriesTotalNo":6,"description":null,"tags":["jpa","spring"]}}},"pageContext":{"slug":"jpa를-이용한-데이터-조회와-저장"}}}