{"componentChunkName":"component---src-templates-post-template-js","path":"/post/gatsby-블로그-환경구성","result":{"data":{"markdownRemark":{"html":"<h2>기술 블로그 시작하기</h2>\n<p>왠지 기억력도 예전과 같지 않아 작업 했던 내역을 기록하기 위해 기술 블로그를 적어야겠다고 생각 했었습니다. 물론 소소한 용돈도 벌면 더 좋겠다는 혼자만의 생각도 있었구요. </p>\n<p>그래서 블로그를 만들때 중요한 부분이 출퇴근 자투리 시간에 빠르게 글을 작성하고 별도의 노력을 들이지 않고도 그럴싸하게 보여져야 한다는 것과 광고를 달 수 있어야 한다는 것 이였습니다. </p>\n<p>이 중 글럴싸하게 빠르게 글을 작성 하는 방식으로 마크다운(markdown)을 이용해 글을 작성하려고 했습니다. </p>\n<p>마크다운은 글을 쓸때 양식을 지정할 수 있는 간단한 문법입니다. edit 를 통해 글에 양식을 지정할 수 있지만 아무래도 손으로 하는게 더 생산성이 높기 때문에 자주 사용되는 방식 입니다.</p>\n<p>글 작성 도구로 사용하는 노션 (notion) 이 마크다운 문법으로 글을 내려받을 수 있게 지원하기 때문에 꼭 필요한 부분 이였죠.</p>\n<ul>\n<li>마크다운 소개 : <a href=\"https://ko.wikipedia.org/wiki/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4\">https://ko.wikipedia.org/wiki/마크다운</a></li>\n<li>노션 소개 : <a href=\"https://www.notion.so/\">https://www.notion.so/</a></li>\n</ul>\n<p>그리고 광고를 위해 구글 애드센스를 달 수 있어야 했습니다. </p>\n<hr>\n<h2>블로그 선정하기</h2>\n<p>먼저 국내 포탈에서 제공하는 블로그를 찾아 봤습니다. 네이버 블로그와 카카오에서 제공하는 티스토리 그리고 브런치 까지, 최근에는 velopert 님이 만드신 velog 도 있더라구요.</p>\n<p>이 중에 네이버 블로그는 마크다운이 지원 되지 않았습니다. 브런치와 velog 는 광고를 달 수 없었구요. 원하는 기능을 다 제공하는 블로그는 티스토리 밖엔 없었습니다. </p>\n<p>일단 여기에 블로그를 시작해 보려 했습니다. </p>\n<p>하지만 티스토리는 사용하기에 불편한 점이 있습니다. 먼저 정해진 스킨을 사용해야 되는데 문제는 그게 그렇게 그럴싸해 보이진 않는 다는 겁니다. 물론 스킨을 변경할순 있었죠. 하지만 저 같은 BE 개발자가 사용하기에는 뭔가 조금 복잡하고 불편해 보이는 것 같았습니다.</p>\n<hr>\n<h2>gatsby로 블로그 만들기</h2>\n<p>불편하지만 이렇게 티스토리에 길들여져야 되나 ? 개인적으로 아쉬워 하고 있을때 불현듯 이럴거면 그냥 만들지머 라는 약간의 오기가 생겼습니다. (왜 그랬을까요 ? 그냥 있는거 쓰면 되는데 ...)</p>\n<p>찾아 보니 gasby 라는 툴이 있네요. 정적 페이지를 생성 하는 툴이라고 합니다. 뭔가 의미가 잘 와닫지 않습니다.  가이드 문서를 보니 react 와 graphql 을 섞어 사용 한다고 합니다. </p>\n<p>회사에서 FE 를 위한 기술로 react 를 사용하고 있기 때문에 딱 이거다 라는 생각이 들었습니다.</p>\n<h3>설치</h3>\n<p>잘 모르겠으나 일단 설치해 보겠습니다.</p>\n<p>먼저 gatsby cli 툴을 설치하고 작성할 사이트를 gatsby new [사이트이름] 명령어를 이용해 생성해 줍니다. 새로운 사이트를 만들때 미리 필요한 구성을 해 놓은 starter 를 이용해 사이트를 만들기도 합니다. starter 를 선택하지 않으면 기본 starter 가 선택되어 사이트가 생성 됩니다. </p>\n<p>gatsby 를 사용할때는 npm 을 사용하니 설치 되어 있지 않다면 설치가 필요합니다.</p>\n<ul>\n<li>gatsby 설치하기 : <a href=\"https://www.gatsbyjs.org/docs/quick-start/\">https://www.gatsbyjs.org/docs/quick-start/</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g gatsby-cli\ngatsby new gatsby-site</code></pre></div>\n<p>적은 노력을 이용해 그럴싸하게 보여지는 것이 목표이니 이를 위해 마크다운을 지원하기 위한 설정을 해보겠습니다.</p>\n<ul>\n<li>markdown 설정하기 : <a href=\"https://www.gatsbyjs.org/docs/adding-markdown-pages/\">https://www.gatsbyjs.org/docs/adding-markdown-pages/</a></li>\n</ul>\n<p>먼저 필요한 폴더를 생성 합시다.</p>\n<ul>\n<li>markdown-pages 는 블로그 포스트 파일이 위치하는 곳 입니다.</li>\n<li>templates 에는 이 마크다운을 어떻게 보여줄지를 설정하기 위한 양식을 정의 하는 곳 압니다.</li>\n</ul>\n<p>그렇습니다. 보시면 아시겠지만 gatsby 는 블로그 포스트를 한땀 한땀 마크다운 형식의 파일로 작성해 올리는 방식입니다. 모든 문서를 정적파일 (html) 로 변환하는 작업을 gatsby 가 해주기는 합니다. </p>\n<p>너무 옛날방식 같아 보이나요 ? 일단 진행해 보겠습니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> gatsby-site\n<span class=\"token function\">mkdir</span> src/markdown-pages\n<span class=\"token function\">mkdir</span> src/templates</code></pre></div>\n<p>이제 마크다운을 위한 추가 플러그인을 설치합니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save gatsby-source-filesystem\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save gatsby-transformer-remark</code></pre></div>\n<h3>환경설정</h3>\n<p>설치한 추가 기능들을 gatsby 플러그인으로 등록 합니다. </p>\n<p>gatsby 가 설치되면 기본적으로 몇가지 설정파일이 같이 생성됩니다. gatsby config 는 그런 파일 중 하나이며 플러그인을 설정 할 수 있습니다.  </p>\n<h4>gatsby-config.js</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">{</span>\n    resolve<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">gatsby-source-filesystem</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">markdown-pages</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      path<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>__dirname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/src/markdown-pages</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">gatsby-transformer-remark</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<h3>template 설정</h3>\n<p>그 다음 블로그 template 을 설정할 차례 압니다. </p>\n<p>gatsby 의 특징은 포스팅 하는 문서의 내용을 그래프형 데이타로 색인화 해서 관리 해준다는 부분 입니다. </p>\n<p>template 은 이렇게 색인화된 데이터를 graphql 을 이용해 질의한 다음 어떻게 문서를 보여질지를 정의 하는 과정입니다. 마치 데이터베이스에서 데이터를 질의하는 것과 같은 방식으로 조회를 하는 것이죠.</p>\n<h4>src/templates/blogTemplate.js</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> graphql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"gatsby\"</span>\n\n<span class=\"token comment\">// 2.graphql로 질의한 결과는 props 에 바인딩되어 전달</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Template</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> markdownRemark <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> data \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> frontmatter<span class=\"token punctuation\">,</span> html <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> markdownRemark\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"blog-post-container\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"blog-post\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>frontmatter<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>frontmatter<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div\n          className<span class=\"token operator\">=</span><span class=\"token string\">\"blog-post-content\"</span>\n          dangerouslySetInnerHTML<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> __html<span class=\"token operator\">:</span> html <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 1.여기가 graphql로 질의하는 부분</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> pageQuery <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query($slug: String!) {\n    markdownRemark(frontmatter: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        slug\n        title\n      }\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>이제 만들어준 template 을  gatsby-node.js 설정 파일에 설정해 줍시다. gatsby-node.js 는 gatsby 를 위한 기본 설정 파일 입니다.</p>\n<p>gatsby node 설정 파일은 색인화된 포스팅 데이타를 기준으로 createPage 명령을 통해 gatsby 가 시작할때 포스팅 페이지를 생성하고 등록하는 과정을 정의할 수 있습니다. </p>\n<p>gatsby 가 createPage 로 페이지를 만들때 추가로 마크다운을 위해 만든 template 을 사용 하도록 설정을 추가해 봅시다. </p>\n<h4>gatsby-node.js</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createPages</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> actions<span class=\"token punctuation\">,</span> graphql<span class=\"token punctuation\">,</span> reporter <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createPage <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> actions\n  <span class=\"token keyword\">const</span> blogPostTemplate <span class=\"token operator\">=</span> require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">./src/templates/blogTemplate.js</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">graphql</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    {\n      allMarkdownRemark(\n        sort: { order: DESC, fields: [frontmatter___date] }\n        limit: 1000\n      ) {\n        edges {\n          node {\n            frontmatter {\n              slug\n            }\n          }\n        }\n      }\n    }\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    reporter<span class=\"token punctuation\">.</span><span class=\"token function\">panicOnBuild</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Error while running GraphQL query.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n  result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> node <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      path<span class=\"token operator\">:</span> node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">,</span>\n      component<span class=\"token operator\">:</span> blogPostTemplate<span class=\"token punctuation\">,</span>\n      context<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        slug<span class=\"token operator\">:</span> node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>자 이제 모든 설정이 완료 되었습니다. 설정된 모든 내용을 한번 띄워 보겠습니다. </p>\n<p>gatsby develop 은 개발용 웹서버를 사용해 사이트를 시작하라는 명령어 입니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gatsby develop</code></pre></div>\n<p>적용이 완료된 사이트는 아래 주소를 통해 접근 할 수 있습니다. 색인화된 데이터를 확인하고 싶으면 뒤에 graphql 을 붙여 데이터를 확인 할 수 있습니다. 만약 필요하다면 색인화된 데이터를 위해 직접 조회 쿼리를 작성해 필요한 데이타를 확인 할 수도 있습니다. </p>\n<ul>\n<li>테스트용 블로그 접근 주소 : localhost:8000</li>\n<li>색인화된 데이터를 확인할 수 있는 graphql 주소 : localhost:8000/___graphql</li>\n</ul>\n<h3>샘플 페이지 작성</h3>\n<p>이제 마크다운이 잘 나오는지 확인해 볼까요 ? 마크다운 문서를 하나 추가해 줍시다. 파일의 위치는 위에서 생성한 src/markdown-pages 폴더에 위치 시킵니다. </p>\n<h4>src/markdown-pages/hello.md</h4>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token hr punctuation\">---</span>\nslug: \"/blog/hello-gatsby\"\ndate: \"2020-06-06\"\n<span class=\"token title important\">title: \"hello gatsby\"\n<span class=\"token punctuation\">---</span></span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">##</span> hello gatsby</span>\ngatsby 로 블로그를 시작해 봅시다.</code></pre></div>\n<p>마크다운 페이지를 만들때 '—-' 블럭으로 쌓여 있는 부분에 graphql 에서 사용하기 위한 추가 속성들을 정의되는 부분 입니다. </p>\n<p>짜잔 이제 추가한 페이지를 띄워 봅시다. </p>\n<ul>\n<li>샘플페이지 : <a href=\"http://localhost:8000/blog/hello-gatsby\">http://localhost:8000/blog/hello-gatsby</a></li>\n</ul>\n<hr>\n<h2>정리</h2>\n<p>정리를 해보겠습니다</p>\n<ul>\n<li>gatsby 는 정적페이지 생성툴입니다.</li>\n<li>react 와 graphql 을 사용합니다. 그렇기 때문에 react 를 알고 있어야 합니다.</li>\n<li>생성은 pages 폴더 밑에 정의된 페이지를 자동으로 읽어 운영 환경으로 빌드 할때 html 로 알아서 변환해 줍니다.</li>\n<li>마크다운을 지원하기 위해선 별도의 플러그인을 설정해야 합니다.</li>\n</ul>\n<hr>\n<h2>소스코드</h2>\n<p><a href=\"https://github.com/jogeum/gatsby-site\">https://github.com/jogeum/gatsby-site</a></p>","frontmatter":{"title":"gatsby 블로그 환경구성","date":"2020/06/06","template":"post","slug":"gatsby-블로그-환경구성","series":"gatsby 기술 블로그 만들기","seriesNo":1,"seriesTotalNo":1,"description":null,"tags":["gatsby","react"]}}},"pageContext":{"slug":"gatsby-블로그-환경구성"}}}