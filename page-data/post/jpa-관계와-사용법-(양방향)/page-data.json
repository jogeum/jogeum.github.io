{"componentChunkName":"component---src-templates-post-template-js","path":"/post/jpa-관계와-사용법-(양방향)","result":{"data":{"markdownRemark":{"html":"<h2>단방향과 양방향</h2>\n<p>데이터베이스에서 테이블의 관계를 구성하는 방법은 <strong>OneToOne</strong>, <strong>OneToMany</strong>, <strong>ManyToOne</strong>, <strong>ManyToMany</strong> 가 있습니다. 물리적인 테이블의 관계에서는 단방향과 양방향에 대한 구분이 없지만 JPA 상에서는 어느 Entity가 주도권을 가지는지에 따라 단방향과 양방향으로 나뉘어 집니다. </p>\n<p>단방향은 참조키 <strong>FK</strong> (Foreign Key) 가 있는 자식 Entity 에서 대상 부모 Entity 를 참조하는 방식 (OneToMany 는 예외입니다.)이며 양방향은 참조키 <strong>FK</strong> 가 있는 자식 Entity 와 대상 부모 Entity 가 서로를 참조할 수 있는 방식입니다.</p>\n<p>양방향 관계를 지정 할 때 유의해야 할 점은 자식과 부모의 서로의 Entity 데이터에 대해 동일한 사용 권한을 가지기 때문에 의도치 않은 데이터의 오염이 일어 날 수 있다는 점 입니다. Entity 의 값이 변경 되었는데 이게 누구에 의한 데이터의 변경 인지 파악하기 어려워 진다는 겁니다. </p>\n<p>그래서 프로그램을 개발 할 때 데이터의 변경에는 최대한 보수적으로 접근 하는게 좋기 때문에 가급적이면 양방향의 관계는 사용하지 않는 것이 좋습니다.</p>\n<hr>\n<h2>@OneToOne</h2>\n<p>앞서 단방향 <strong>@OneToOne</strong> 관계를 설명하면서 <strong>FK</strong> 를 소유한 자식 Entity 가 부모 Entity 를 참조하는 형태에 대해서 살펴 보았습니다. 양방향 <strong>@OneToOne</strong> 은 이와 크게 다르지 않으며 부모 Entity 에서 자식 Entity 에 대한 <strong>mappedBy</strong> 설정만 추가해 줍니다. </p>\n<p><strong>mappedBy</strong> 설정에는 자식 Entity 에서 바라보는 부모 Entity 의 <strong>변수 이름</strong>을 지정합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@OneToOne</span><span class=\"token punctuation\">(</span>mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Child Entity 에서 변수로 사용하고 있는 parent 이름</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Child</span> child<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Entity</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"child\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@OneToOne</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Parent</span> parent<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2>@OneToMany, @ManyToOne</h2>\n<p><strong>@OneToMany</strong>, <strong>@ManyToOne</strong> 은 사용 되는 Entity 의 주도권을 누가 가지는지에 따라 달라 지는 것이지 원래는 데이터베이스 상에서 같은 관계를 의미합니다. 부모 Entity 입장 에서는 <strong>@OneToMany</strong>, 자식 Entity 입장 에서는 <strong>@ManyToOne</strong> 이 되는 것 이죠. 그렇기 때문에 양방향은 <strong>@OneToMany</strong> 와 <strong>@ManyToOne</strong> 이 같이 사용 됩니다.</p>\n<p>앞서 단방향 <strong>@OneToMany</strong> 일 경우 관계 중 유일하게 <strong>FK</strong> 가 위치한 자식 Entity 가 아닌 부모 Entity 에 어노테이션이 정의된다고 이야기 드렸습니다. 하지만 양방향 <strong>@OneToMany</strong> 일때 부모 Entity 에 <strong>@JoinColumn</strong> 어노테이션이 제거되고 <strong>@OneToMany</strong> 의 <strong>mappedBy</strong> 속성을 추가해 자식 Entity 의 관계를 설정합니다. </p>\n<p><strong>mappedBy</strong> 속성에는 자식 Entity 에서 부모 Entity를 바라보는 <strong>변수이름</strong>을 지정합니다. 자식 Entity 에서는 단방향 <strong>@ManyToOne</strong> 와 동일하게 부모와의 관계를 지정해 줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Child</span><span class=\"token punctuation\">></span></span> childList<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Entity</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"child\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@ManyToOne</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Parent</span> parent<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2>@ManyToMany</h2>\n<p>단방향 <strong>@ManyToMany</strong> 는 앞서 물리적으로는 존재할 수 없는 논리적인 관계이며 이를 위해 중간에 서로의 <strong>PK</strong> 정보를 담아두는 맵핑 테이블을 사용해 <strong>@ManyToMany</strong> 를 표현한다고 이야기 드렸습니다. </p>\n<p>양방향 <strong>@ManyToMany</strong> 는 이와 크게 다르지 않지만 문제는 서로의 Entity 가 동등한 위치를 가지고 있기 때문에 관계에 대한 설정 정보를 어디에 지정할 것 인가를 결정해야 한다는 점 입니다. 관계 설정 정보를 둘 중 어디에 둘 것 인지를 결정 했다면 반대쪽 Entity 에 <strong>@ManyToMany</strong> 어노테이션을 정의하고 다른 쪽에는 <strong>mappedBy</strong> 속성에 정의된 <strong>변수 이름</strong>을 지정합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@ManyToMany</span>\n    <span class=\"token annotation punctuation\">@JoinTable</span><span class=\"token punctuation\">(</span>\n        name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent_child\"</span><span class=\"token punctuation\">,</span>\n        joinColumns <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent_id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        inverseJoinColumns <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"child_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Child</span><span class=\"token punctuation\">></span></span> childList<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Entity</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"child\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@ManyToMany</span><span class=\"token punctuation\">(</span>mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"childList\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 반대쪽에 정의된 변수이름으로 관계를 지정</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Parent</span> parent<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2>관계를 설정하기에 앞서</h2>\n<p><strong>JPA</strong> 에서 Entity 간의 관계를 지정 할 때  Entity 객체의 모든 관계에 대해서 설정을 하겠다고 생각을 하지 않아야 합니다. 물론 논리적으로 완벽하게 데이터베이스의 모든 관계를 정의하고 싶다는 욕심이 생길 수도 있겠지만 의도치 않은 데이터 오염과 불필요한 질의 쿼리로 인해 부하가 증가 될 수도 있기 때문에 관계를 정의 하기 전 반드시 이 관계가 시스템에서 꼭 논리적으로 결합되어야 하는지에 대해 생각해봐야 합니다. </p>\n<p>이것을 구분하기 위한 적절한 기준은 이 Entity 객체가 혼자 독립적으로 데이터 조작이 되는지 여부 입니다. 만약 단일 Entity 가 다른 Entity 와 연관이 없이 <strong>CRUD</strong> 가 모두 동작이 된다면 이는 독립적이며 관계가 없는 Entity 일 확률이 아주 높습니다. </p>\n<p>만약 이에 대해 정확한 답을 내릴 수 없다면 두 Entity 사이에 관계를 설정하지 않고 필요한 데이터를 각각 조회하는 방식으로 해결하는 것이 더 좋은 방법일 수 있습니다.</p>\n<p>다음 글에서는 Repository 를 이용한 값의 조회에 대해서 알아 보겠습니다.</p>","frontmatter":{"title":"JPA 관계와 사용법 (양방향)","date":"2020/04/18","template":"post","slug":"jpa-관계와-사용법-(양방향)","series":"쉽게 이해하고 사용하는 JPA","seriesNo":4,"seriesTotalNo":6,"description":null,"tags":["jpa","spring"]}}},"pageContext":{"slug":"jpa-관계와-사용법-(양방향)"}}}