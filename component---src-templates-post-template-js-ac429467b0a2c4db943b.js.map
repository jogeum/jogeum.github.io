{"version":3,"sources":["webpack:///./src/components/SeriesBox.js","webpack:///./src/components/TitleBox.js","webpack:///./src/components/Tags.js","webpack:///./src/templates/post-template.js","webpack:///./src/hooks/usePosts.js"],"names":["SeriesBox","series","seriesNo","seriesTotalNo","posts","usePosts","postSeries","_","filter","post","node","frontmatter","mapValues","edge","title","slug","template","sortBy","value","useState","toggle","setToggle","nextNo","getSeries","findNo","head","prevSeries","nextSeries","console","log","className","id","onClick","icon","faAngleUp","fixedWidth","faAngleDown","style","padding","faArrowAltCircleLeft","navigate","url","faArrowAltCircleRight","aria-labelledby","data-parent","map","index","key","TitleBox","date","Math","floor","random","tagStyle","fontSize","margin","fontWeight","Tags","tags","tag","Badge","variant","kebabCase","query","PostTemplate","data","markdownRemark","html","description","Container","Row","Sidebar","Content","dangerouslySetInnerHTML","__html","allMarkdownRemark","edges"],"mappings":"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","file":"component---src-templates-post-template-js-ac429467b0a2c4db943b.js","sourcesContent":["import React, { useState } from 'react'\nimport { navigate } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport { faAngleDown, faAngleUp, faArrowAltCircleLeft, faArrowAltCircleRight } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport _ from 'lodash'\nimport usePosts from '../hooks/usePosts'\n\nconst SeriesBox = ({ series, seriesNo, seriesTotalNo }) => {\n\n  const { posts } = usePosts()\n  const postSeries = _(posts)\n    .filter(post => post.node.frontmatter.series === series)\n    .mapValues(edge => {\n      const { title, slug, template, seriesNo } = edge.node.frontmatter\n      return { 'title': title, 'seriesNo': seriesNo, 'url': `/${template}/${slug}` }\n    })\n    .sortBy(series => series.seriesNo).value()\n\n  const [toggle, setToggle] = useState(false)\n\n  const prevNo = seriesNo - 1 < 1 ? 1 : seriesNo - 1\n  const nextNo = seriesNo + 1 > seriesTotalNo ? seriesTotalNo : seriesNo + 1\n\n  const getSeries = (findNo) => _(postSeries).filter(series => series.seriesNo === findNo).head()\n\n  const prevSeries = getSeries(prevNo)\n  const nextSeries = getSeries(nextNo)\n\n  console.log(postSeries)\n\n  return (\n    <div className=\"container pb-3\">\n      <div id=\"accordion\">\n        <div className=\"card bg-secondary\">\n          <div className=\"card-header clearfix\">\n            <button className=\"btn float-left\" onClick={() => setToggle(!toggle)}>\n              {\n                toggle\n                  ? <span>목록닫기 <FontAwesomeIcon icon={faAngleUp} fixedWidth/></span>\n                  : <span>목록보기 <FontAwesomeIcon icon={faAngleDown} fixedWidth/></span>\n              }\n            </button>\n            <span className='float-right' style={{ padding: '0.375rem 0.75rem' }}>\n              <span className='mr-3'>{`${seriesNo} / ${seriesTotalNo}`}</span>\n              <FontAwesomeIcon icon={faArrowAltCircleLeft} onClick={() => navigate(prevSeries.url)} fixedWidth className='pointer mr-1'/>\n              <FontAwesomeIcon icon={faArrowAltCircleRight} onClick={() => navigate(nextSeries.url)} fixedWidth className='pointer'/>\n            </span>\n          </div>\n          {\n            toggle &&\n            <div id=\"collapseOne\" className=\"collapse show\" aria-labelledby=\"headingOne\" data-parent=\"#accordion\">\n              <div className=\"card-body\">\n                {\n                  postSeries && postSeries.map(\n                    ({ title, seriesNo, url }, index) =>\n                      <p key={index} className='pointer' onClick={() => navigate(url)}>{`${seriesNo}. ${title}`}</p>\n                  )\n                }\n              </div>\n            </div>\n          }\n\n        </div>\n      </div>\n    </div>\n  )\n}\n\nSeriesBox.propTypes = {\n  series: PropTypes.string.isRequired,\n  seriesNo: PropTypes.number.isRequired,\n  seriesTotalNo: PropTypes.number.isRequired,\n}\n\nexport default SeriesBox","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './TitleBox.scss'\nimport SeriesBox from './SeriesBox'\n\nfunction getPatternNo () {\n  const min = 1, max = 5\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nfunction getBadgeVariant () {\n  const variants = ['primary',\n    'secondary',\n    'success',\n    'danger',\n    'warning',\n    'info',\n    'light',\n    'dark']\n\n  const min = 0, max = 6\n  const no = Math.floor(Math.random() * (max - min + 1) + min)\n\n  return variants[no]\n}\n\nconst TitleBox = ({ date, title, series, seriesNo, seriesTotalNo }) => {\n  return (\n    <div className={'hero-pattern' + getPatternNo()}>\n      <span className={'date'}>{date}</span>\n      {\n        series &&\n        <h2>{series} - ({seriesNo} / {seriesTotalNo})</h2>\n      }\n      <h1>{title}</h1>\n      {\n        series &&\n        <SeriesBox series={series}\n                   seriesNo={seriesNo}\n                   seriesTotalNo={seriesTotalNo}\n        />\n      }\n    </div>\n  )\n}\n\nTitleBox.propTypes = {\n  title: PropTypes.string.isRequired,\n  subtitle: PropTypes.string,\n  date: PropTypes.string,\n  series: PropTypes.string,\n  seriesNo: PropTypes.number,\n  seriesTotalNo: PropTypes.number,\n  postSeries: PropTypes.array,\n}\n\nexport default TitleBox","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { navigate } from 'gatsby'\nimport { Badge } from 'react-bootstrap'\nimport _ from 'lodash'\n\nconst Tags = ({ tags }) => {\n  return (\n    <div className={'my-5'}>\n      {\n        tags &&\n        tags.map(\n          (tag, index) =>\n            <Badge variant={'light pointer'}\n                   key={index}\n                   style={tagStyle}\n                   onClick={() => navigate(`/tag/${_.kebabCase(tag)}`)}>\n              {tag}\n            </Badge>\n        )\n      }\n    </div>\n  )\n}\n\nconst tagStyle = {\n  fontSize: '1.3rem',\n  padding: '0.4rem 0.7rem',\n  margin: '0 0.5rem 0 0',\n  fontWeight: 700,\n}\n\nTags.propTypes = {\n  tags: PropTypes.array.isRequired\n}\n\nexport default Tags","import React from 'react'\nimport { graphql } from 'gatsby'\nimport { Container, Row } from 'react-bootstrap'\nimport Sidebar from '../components/Sidebar'\nimport Content from '../components/Content'\nimport TitleBox from '../components/TitleBox'\nimport Tags from '../components/Tags'\n\nconst PostTemplate = ({ data }) => {\n  const { frontmatter, html, id } = data.markdownRemark\n  const { title, date, template, description, series, seriesNo, seriesTotalNo, tags } = frontmatter\n\n  // const disqusConfig = {\n  //   url: `${\"https://jogeum.net/\" + frontmatter.slug}`,\n  //   identifier: id,\n  //   title: frontmatter.title,\n  // }\n\n  return (\n    <Container>\n      <Row>\n        <Sidebar/>\n        <Content>\n          <div className=\"blog-post\">\n            <TitleBox\n              title={title}\n              date={date}\n              series={series}\n              seriesNo={seriesNo}\n              seriesTotalNo={seriesTotalNo}\n            />\n            <div\n              className=\"blog-post-content\"\n              dangerouslySetInnerHTML={{ __html: html }}\n            />\n            <Tags tags={tags}/>\n          </div>\n          {/*<Disqus config={disqusConfig} />*/}\n        </Content>\n      </Row>\n    </Container>\n  )\n}\n\nexport const query = graphql`\n  query($slug: String!) {\n    markdownRemark(frontmatter: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n        date\n        template\n        slug\n        series\n        seriesNo\n        seriesTotalNo\n        description\n        tags\n      }\n    }\n  }\n`\n\nexport default PostTemplate","import { graphql, useStaticQuery } from 'gatsby'\n\nexport default function usePosts () {\n  const { allMarkdownRemark } = useStaticQuery(\n    graphql`\n      query PostsListQuery {\n        allMarkdownRemark(\n          filter: { frontmatter: { template: { eq: \"post\" }, publish: { eq: \"Yes\" } } },\n          sort: { order: DESC, fields: [frontmatter___date] }\n        ) {\n          edges {\n            node {\n              frontmatter {\n                template\n                slug\n                title\n                date\n                series\n                seriesNo\n                seriesTotalNo\n              }\n            }\n          }\n        }\n      }\n    `\n  )\n\n  return {\n    'posts': allMarkdownRemark.edges\n  }\n}"],"sourceRoot":""}